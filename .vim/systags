!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DateTimeFormatItem	rainbow/log.cpp	/^    DateTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%s")$/;"	f	class:rainbow::DateTimeFormatItem	signature:(const std::string& format = Ó)
DateTimeFormatItem	rainbow/log.cpp	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
ElapseFormatItem	rainbow/log.cpp	/^    ElapseFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::ElapseFormatItem	signature:(const std::string str = Ó)
ElapseFormatItem	rainbow/log.cpp	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
FiberIdFormatItem	rainbow/log.cpp	/^    FiberIdFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::FiberIdFormatItem	signature:(const std::string str = Ó)
FiberIdFormatItem	rainbow/log.cpp	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
FileLogAppender	rainbow/log.cpp	/^FileLogAppender::FileLogAppender(const std::string& name) : m_filename(name) {}$/;"	f	class:rainbow::FileLogAppender	signature:(const std::string& name)
FileNameFormatItem	rainbow/log.cpp	/^    FileNameFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::FileNameFormatItem	signature:(const std::string str = Ó)
FileNameFormatItem	rainbow/log.cpp	/^class FileNameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
GetFiberId	rainbow/util.cpp	/^uint32_t GetFiberId() {$/;"	f	namespace:rainbow	signature:()
GetThreadId	rainbow/util.cpp	/^pid_t GetThreadId() {$/;"	f	namespace:rainbow	signature:()
LevelFormatItem	rainbow/log.cpp	/^    LevelFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::LevelFormatItem	signature:(const std::string str = Ó)
LevelFormatItem	rainbow/log.cpp	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
LineFormatItem	rainbow/log.cpp	/^    LineFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::LineFormatItem	signature:(const std::string str = Ó)
LineFormatItem	rainbow/log.cpp	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
ListAllMember	rainbow/config.cpp	/^static void ListAllMember(const std::string& prefix, $/;"	f	namespace:rainbow	signature:(const std::string& prefix, const YAML::Node& node, std::list<std::pair<std::string, const YAML::Node> >& output)
LoadFromYaml	rainbow/config.cpp	/^void Config::LoadFromYaml(const YAML::Node& root) {$/;"	f	class:rainbow::Config	signature:(const YAML::Node& root)
LogAppender	rainbow/log.cpp	/^LogAppender::LogAppender() {$/;"	f	class:rainbow::LogAppender	signature:()
LogEvent	rainbow/log.cpp	/^LogEvent::LogEvent(const std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, $/;"	f	class:rainbow::LogEvent	signature:(const std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, int32_t line, uint32_t elapse, uint32_t thread_id, uint32_t fiber_id, uint64_t time)
LogEventWrap	rainbow/log.cpp	/^LogEventWrap::LogEventWrap(LogEvent::ptr e) : m_event(e) {$/;"	f	class:rainbow::LogEventWrap	signature:(LogEvent::ptr e)
LogFormatter	rainbow/log.cpp	/^LogFormatter::LogFormatter(const std::string& pattern) : m_pattern(pattern) {$/;"	f	class:rainbow::LogFormatter	signature:(const std::string& pattern)
Logger	rainbow/log.cpp	/^Logger::Logger(const std::string& name)$/;"	f	class:rainbow::Logger	signature:(const std::string& name)
LoggerManager	rainbow/log.cpp	/^LoggerManager::LoggerManager() {$/;"	f	class:rainbow::LoggerManager	signature:()
LookUpBase	rainbow/config.cpp	/^ConfigVarBase::ptr Config:: LookUpBase(const std::string& name) {$/;"	f	class:rainbow::Config	signature:(const std::string& name)
MessageFormatItem	rainbow/log.cpp	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:rainbow::MessageFormatItem	signature:(const std::string& str = Ó)
MessageFormatItem	rainbow/log.cpp	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
NameFormatItem	rainbow/log.cpp	/^    NameFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::NameFormatItem	signature:(const std::string str = Ó)
NameFormatItem	rainbow/log.cpp	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
NewLineFormatItem	rainbow/log.cpp	/^    NewLineFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::NewLineFormatItem	signature:(const std::string str = Ó)
NewLineFormatItem	rainbow/log.cpp	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
RAINBOW_LOG_DEBUG	rainbow/log.h	24;"	d
RAINBOW_LOG_ERROR	rainbow/log.h	27;"	d
RAINBOW_LOG_FATAL	rainbow/log.h	28;"	d
RAINBOW_LOG_FMT_DEBUG	rainbow/log.h	36;"	d
RAINBOW_LOG_FMT_ERROR	rainbow/log.h	39;"	d
RAINBOW_LOG_FMT_FATAL	rainbow/log.h	40;"	d
RAINBOW_LOG_FMT_INFO	rainbow/log.h	37;"	d
RAINBOW_LOG_FMT_LEVEL	rainbow/log.h	30;"	d
RAINBOW_LOG_FMT_WARN	rainbow/log.h	38;"	d
RAINBOW_LOG_INFO	rainbow/log.h	25;"	d
RAINBOW_LOG_LEVEL	rainbow/log.h	20;"	d
RAINBOW_LOG_ROOT	rainbow/log.h	43;"	d
RAINBOW_LOG_WARN	rainbow/log.h	26;"	d
StringFormatItem	rainbow/log.cpp	/^    StringFormatItem(const std::string& str) : m_string(str) {}$/;"	f	class:rainbow::StringFormatItem	signature:(const std::string& str)
StringFormatItem	rainbow/log.cpp	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
TabFormatItem	rainbow/log.cpp	/^     TabFormatItem(const std::string& str = "") {}$/;"	f	class:rainbow::TabFormatItem	signature:(const std::string& str = Ó)
TabFormatItem	rainbow/log.cpp	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
ThreadIdFormatItem	rainbow/log.cpp	/^    ThreadIdFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::ThreadIdFormatItem	signature:(const std::string str = Ó)
ThreadIdFormatItem	rainbow/log.cpp	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:
ToString	rainbow/log.cpp	/^const char* LogLevel::ToString(LogLevel::Level level) {$/;"	f	class:rainbow::LogLevel	signature:(LogLevel::Level level)
XX	rainbow/log.cpp	138;"	d	file:
XX	rainbow/log.cpp	148;"	d	file:
XX	rainbow/log.cpp	334;"	d	file:
XX	rainbow/log.cpp	348;"	d	file:
XX	tests/test_config.cpp	60;"	d	file:
__RAINBOW_CONFIG_H__	rainbow/config.h	2;"	d
__RAINBOW_LOG_H	rainbow/log.h	2;"	d
__RAINBOW_SINGLETON_H_	rainbow/singleton.h	2;"	d
__RAINBOW_UTIL_H_	rainbow/util.h	2;"	d
addAppender	rainbow/log.cpp	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:rainbow::Logger	signature:(LogAppender::ptr appender)
debug	rainbow/log.cpp	/^void Logger::debug(LogEvent::ptr event) { log(LogLevel::DEBUG, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
delAppender	rainbow/log.cpp	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:rainbow::Logger	signature:(LogAppender::ptr appender)
error	rainbow/log.cpp	/^void Logger::error(LogEvent::ptr event) { log(LogLevel::ERROR, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
fatal	rainbow/log.cpp	/^void Logger::fatal(LogEvent::ptr event) { log(LogLevel::FATAL, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
format	rainbow/log.cpp	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger,$/;"	f	class:rainbow::LogFormatter	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	rainbow/log.cpp	/^void LogEvent::format(const char* fmt, ...) {$/;"	f	class:rainbow::LogEvent	signature:(const char* fmt, ...)
format	rainbow/log.cpp	/^void LogEvent::format(const char* fmt, va_list al) {$/;"	f	class:rainbow::LogEvent	signature:(const char* fmt, va_list al)
format	rainbow/log.cpp	/^void LogFormatter::FormatItem::format(std::ostream& os,$/;"	f	class:rainbow::LogFormatter::FormatItem	signature:(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
g_float_value_config	tests/test_config.cpp	/^rainbow::ConfigVar<float>::ptr g_float_value_config = $/;"	v
g_int_list_value_config	tests/test_config.cpp	/^rainbow::ConfigVar<std::list<int> >::ptr g_int_list_value_config = $/;"	v
g_int_set_value_config	tests/test_config.cpp	/^rainbow::ConfigVar<std::set<int> >::ptr g_int_set_value_config = $/;"	v
g_int_value_config	tests/test_config.cpp	/^rainbow::ConfigVar<int>::ptr g_int_value_config = $/;"	v
g_int_vector_value_config	tests/test_config.cpp	/^rainbow::ConfigVar<std::vector<int> >::ptr g_int_vector_value_config = $/;"	v
getLogger	rainbow/log.cpp	/^Logger::ptr LoggerManager::getLogger(const std::string& name) {$/;"	f	class:rainbow::LoggerManager	signature:(const std::string& name)
getSS	rainbow/log.cpp	/^std::stringstream& LogEventWrap::getSS() {$/;"	f	class:rainbow::LogEventWrap	signature:()
getString	rainbow/log.cpp	/^    std::string getString() const { return m_string; }$/;"	f	class:rainbow::StringFormatItem	signature:() const
info	rainbow/log.cpp	/^void Logger::info(LogEvent::ptr event) { log(LogLevel::INFO, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
init	rainbow/log.cpp	/^void LogFormatter::init() {$/;"	f	class:rainbow::LogFormatter	signature:()
log	rainbow/log.cpp	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level,$/;"	f	class:rainbow::FileLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
log	rainbow/log.cpp	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:rainbow::Logger	signature:(LogLevel::Level level, LogEvent::ptr event)
log	rainbow/log.cpp	/^void StdoutLogAppender::log(std::shared_ptr<Logger> logger,$/;"	f	class:rainbow::StdoutLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
m_format	rainbow/log.cpp	/^    std::string m_format;$/;"	m	class:rainbow::DateTimeFormatItem	file:
m_string	rainbow/log.cpp	/^    std::string m_string;$/;"	m	class:rainbow::StringFormatItem	file:
main	boost/test.cpp	/^int main()$/;"	f	signature:()
main	tests/test.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tests/test_config.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
print_yaml	tests/test_config.cpp	/^void print_yaml(const YAML::Node& node, int level) {$/;"	f	signature:(const YAML::Node& node, int level)
rainbow	rainbow/config.cpp	/^namespace rainbow {$/;"	n	file:
rainbow	rainbow/log.cpp	/^namespace rainbow {$/;"	n	file:
rainbow	rainbow/util.cpp	/^namespace rainbow {$/;"	n	file:
reopen	rainbow/log.cpp	/^bool FileLogAppender::reopen() {$/;"	f	class:rainbow::FileLogAppender	signature:()
s_datas	rainbow/config.cpp	/^Config::ConfigVarMap Config::s_datas;$/;"	m	class:rainbow::Config	file:
setLevel	rainbow/log.cpp	/^void LogAppender::setLevel(const LogLevel::Level& level) {$/;"	f	class:rainbow::LogAppender	signature:(const LogLevel::Level& level)
test_config	tests/test_config.cpp	/^void test_config() {$/;"	f	signature:()
test_yaml	tests/test_config.cpp	/^void test_yaml() {$/;"	f	signature:()
warn	rainbow/log.cpp	/^void Logger::warn(LogEvent::ptr event) { log(LogLevel::WARN, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
~LogEventWrap	rainbow/log.cpp	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:rainbow::LogEventWrap	signature:()
